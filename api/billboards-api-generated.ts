/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Billboard } from '../models';
// @ts-ignore
import { BillboardsCreateNewBillboard401Response } from '../models';
// @ts-ignore
import { BillboardsCreateNewBillboard422Response } from '../models';
// @ts-ignore
import { BillboardsGetById401Response } from '../models';
// @ts-ignore
import { BillboardsGetById404Response } from '../models';
// @ts-ignore
import { BillboardsGetByIdResponse } from '../models';
// @ts-ignore
import { BillboardsGetList401Response } from '../models';
// @ts-ignore
import { BillboardsUnpublishBillboard404Response } from '../models';
// @ts-ignore
import { BillboardsUnpublishBillboardResponse } from '../models';
// @ts-ignore
import { BillboardsUpdateById401Response } from '../models';
// @ts-ignore
import { BillboardsUpdateById404Response } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BillboardsApi - axios parameter creator
 * @export
 */
export const BillboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to create a new billboard.
         * @summary Create a billboard
         * @param {Array<Billboard>} [billboard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBillboard: async (billboard?: Array<Billboard>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: billboard,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/billboards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(billboard, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a single billboard, via its id.
         * @summary A billboard (by id)
         * @param {number} id The ID of the billboard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/billboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/billboards/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of all billboards.
         * @summary Billboards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/billboards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to remove a billboard from rotation by un-publishing it.
         * @summary Unpublish a billboard
         * @param {number} id The ID of the billboard to unpublish.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishBillboard: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unpublishBillboard', 'id', id)
            const localVarPath = `/api/billboards/{id}/unpublish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/billboards/{id}/unpublish',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to update the attributes of a single billboard, via its id.
         * @summary Update a billboard by ID
         * @param {number} id The ID of the billboard.
         * @param {Array<Billboard>} [billboard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (id: number, billboard?: Array<Billboard>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateById', 'id', id)
            const localVarPath = `/api/billboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: billboard,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/billboards/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(billboard, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillboardsApi - functional programming interface
 * @export
 */
export const BillboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to create a new billboard.
         * @summary Create a billboard
         * @param {BillboardsApiCreateNewBillboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewBillboard(requestParameters: BillboardsApiCreateNewBillboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Billboard>>> {
            const billboard: Array<Billboard> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewBillboard(billboard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a single billboard, via its id.
         * @summary A billboard (by id)
         * @param {BillboardsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: BillboardsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillboardsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of all billboards.
         * @summary Billboards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Billboard>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to remove a billboard from rotation by un-publishing it.
         * @summary Unpublish a billboard
         * @param {BillboardsApiUnpublishBillboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpublishBillboard(requestParameters: BillboardsApiUnpublishBillboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpublishBillboard(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to update the attributes of a single billboard, via its id.
         * @summary Update a billboard by ID
         * @param {BillboardsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: BillboardsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Billboard>>> {
            const billboard: Array<Billboard> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.id, billboard, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BillboardsApi - factory interface
 * @export
 */
export const BillboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillboardsApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to create a new billboard.
         * @summary Create a billboard
         * @param {BillboardsApiCreateNewBillboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBillboard(requestParameters: BillboardsApiCreateNewBillboardRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Billboard>> {
            return localVarFp.createNewBillboard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a single billboard, via its id.
         * @summary A billboard (by id)
         * @param {BillboardsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: BillboardsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BillboardsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of all billboards.
         * @summary Billboards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<Array<Billboard>> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to remove a billboard from rotation by un-publishing it.
         * @summary Unpublish a billboard
         * @param {BillboardsApiUnpublishBillboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishBillboard(requestParameters: BillboardsApiUnpublishBillboardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unpublishBillboard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to update the attributes of a single billboard, via its id.
         * @summary Update a billboard by ID
         * @param {BillboardsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: BillboardsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Billboard>> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewBillboard operation in BillboardsApi.
 * @export
 * @interface BillboardsApiCreateNewBillboardRequest
 */
export type BillboardsApiCreateNewBillboardRequest = Array<Billboard>

/**
 * Request parameters for getById operation in BillboardsApi.
 * @export
 * @interface BillboardsApiGetByIdRequest
 */
export type BillboardsApiGetByIdRequest = {
    
    /**
    * The ID of the billboard.
    * @type {number}
    * @memberof BillboardsApiGetById
    */
    readonly id: number
    
}

/**
 * Request parameters for unpublishBillboard operation in BillboardsApi.
 * @export
 * @interface BillboardsApiUnpublishBillboardRequest
 */
export type BillboardsApiUnpublishBillboardRequest = {
    
    /**
    * The ID of the billboard to unpublish.
    * @type {number}
    * @memberof BillboardsApiUnpublishBillboard
    */
    readonly id: number
    
}

/**
 * Request parameters for updateById operation in BillboardsApi.
 * @export
 * @interface BillboardsApiUpdateByIdRequest
 */
export type BillboardsApiUpdateByIdRequest = {
    
    /**
    * The ID of the billboard.
    * @type {number}
    * @memberof BillboardsApiUpdateById
    */
    readonly id: number
    
}Array<Billboard>

/**
 * BillboardsApiGenerated - object-oriented interface
 * @export
 * @class BillboardsApiGenerated
 * @extends {BaseAPI}
 */
export class BillboardsApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to create a new billboard.
     * @summary Create a billboard
     * @param {BillboardsApiCreateNewBillboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillboardsApiGenerated
     */
    public createNewBillboard(requestParameters: BillboardsApiCreateNewBillboardRequest, options?: AxiosRequestConfig) {
        return BillboardsApiFp(this.configuration).createNewBillboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a single billboard, via its id.
     * @summary A billboard (by id)
     * @param {BillboardsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillboardsApiGenerated
     */
    public getById(requestParameters: BillboardsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return BillboardsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of all billboards.
     * @summary Billboards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillboardsApiGenerated
     */
    public getList(options?: AxiosRequestConfig) {
        return BillboardsApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to remove a billboard from rotation by un-publishing it.
     * @summary Unpublish a billboard
     * @param {BillboardsApiUnpublishBillboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillboardsApiGenerated
     */
    public unpublishBillboard(requestParameters: BillboardsApiUnpublishBillboardRequest, options?: AxiosRequestConfig) {
        return BillboardsApiFp(this.configuration).unpublishBillboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to update the attributes of a single billboard, via its id.
     * @summary Update a billboard by ID
     * @param {BillboardsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillboardsApiGenerated
     */
    public updateById(requestParameters: BillboardsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return BillboardsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
