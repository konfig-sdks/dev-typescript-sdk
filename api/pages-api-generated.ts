/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Page } from '../models';
// @ts-ignore
import { PagesCreateNewPage401Response } from '../models';
// @ts-ignore
import { PagesCreateNewPage422Response } from '../models';
// @ts-ignore
import { PagesCreateNewPageRequest } from '../models';
// @ts-ignore
import { PagesCreateNewPageResponse } from '../models';
// @ts-ignore
import { PagesRemovePageById422Response } from '../models';
// @ts-ignore
import { PagesRemovePageByIdResponse } from '../models';
// @ts-ignore
import { PagesUpdatePageDetails422Response } from '../models';
// @ts-ignore
import { PagesUpdatePageDetailsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PagesApi - axios parameter creator
 * @export
 */
export const PagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to create a new page.
         * @summary pages
         * @param {PagesCreateNewPageRequest} [pagesCreateNewPageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPage: async (pagesCreateNewPageRequest?: PagesCreateNewPageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: pagesCreateNewPageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/pages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(pagesCreateNewPageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
         * @summary show details for a page
         * @param {number} id The ID of the page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetails', 'id', id)
            const localVarPath = `/api/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/pages/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve details for all Page objects.
         * @summary show details for all pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDetails: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/pages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to delete a single Page object, specified by ID.
         * @summary remove a page
         * @param {number} id The ID of the page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePageById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removePageById', 'id', id)
            const localVarPath = `/api/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/pages/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
         * @summary update details for a page
         * @param {number} id The ID of the page.
         * @param {Page} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageDetails: async (id: number, page?: Page, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePageDetails', 'id', id)
            const localVarPath = `/api/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: page,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/pages/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(page, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PagesApi - functional programming interface
 * @export
 */
export const PagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PagesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to create a new page.
         * @summary pages
         * @param {PagesApiCreateNewPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewPage(requestParameters: PagesApiCreateNewPageRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagesCreateNewPageResponse>> {
            const pagesCreateNewPageRequest: PagesCreateNewPageRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                slug: requestParameters.slug,
                body_markdown: requestParameters.body_markdown,
                body_json: requestParameters.body_json,
                is_top_level_path: requestParameters.is_top_level_path,
                template: requestParameters.template
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewPage(pagesCreateNewPageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
         * @summary show details for a page
         * @param {PagesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: PagesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve details for all Page objects.
         * @summary show details for all pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllDetails(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Page>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllDetails(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to delete a single Page object, specified by ID.
         * @summary remove a page
         * @param {PagesApiRemovePageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePageById(requestParameters: PagesApiRemovePageByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePageById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
         * @summary update details for a page
         * @param {PagesApiUpdatePageDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePageDetails(requestParameters: PagesApiUpdatePageDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const page: Page = {
                title: requestParameters.title,
                description: requestParameters.description,
                slug: requestParameters.slug,
                body_markdown: requestParameters.body_markdown,
                body_json: requestParameters.body_json,
                is_top_level_path: requestParameters.is_top_level_path,
                social_image: requestParameters.social_image,
                template: requestParameters.template
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePageDetails(requestParameters.id, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PagesApi - factory interface
 * @export
 */
export const PagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PagesApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to create a new page.
         * @summary pages
         * @param {PagesApiCreateNewPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPage(requestParameters: PagesApiCreateNewPageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PagesCreateNewPageResponse> {
            return localVarFp.createNewPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
         * @summary show details for a page
         * @param {PagesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: PagesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Page> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve details for all Page objects.
         * @summary show details for all pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDetails(options?: AxiosRequestConfig): AxiosPromise<Array<Page>> {
            return localVarFp.listAllDetails(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to delete a single Page object, specified by ID.
         * @summary remove a page
         * @param {PagesApiRemovePageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePageById(requestParameters: PagesApiRemovePageByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Page> {
            return localVarFp.removePageById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
         * @summary update details for a page
         * @param {PagesApiUpdatePageDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePageDetails(requestParameters: PagesApiUpdatePageDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Page> {
            return localVarFp.updatePageDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewPage operation in PagesApi.
 * @export
 * @interface PagesApiCreateNewPageRequest
 */
export type PagesApiCreateNewPageRequest = {
    
} & PagesCreateNewPageRequest

/**
 * Request parameters for getDetails operation in PagesApi.
 * @export
 * @interface PagesApiGetDetailsRequest
 */
export type PagesApiGetDetailsRequest = {
    
    /**
    * The ID of the page.
    * @type {number}
    * @memberof PagesApiGetDetails
    */
    readonly id: number
    
}

/**
 * Request parameters for removePageById operation in PagesApi.
 * @export
 * @interface PagesApiRemovePageByIdRequest
 */
export type PagesApiRemovePageByIdRequest = {
    
    /**
    * The ID of the page.
    * @type {number}
    * @memberof PagesApiRemovePageById
    */
    readonly id: number
    
}

/**
 * Request parameters for updatePageDetails operation in PagesApi.
 * @export
 * @interface PagesApiUpdatePageDetailsRequest
 */
export type PagesApiUpdatePageDetailsRequest = {
    
    /**
    * The ID of the page.
    * @type {number}
    * @memberof PagesApiUpdatePageDetails
    */
    readonly id: number
    
} & Page

/**
 * PagesApiGenerated - object-oriented interface
 * @export
 * @class PagesApiGenerated
 * @extends {BaseAPI}
 */
export class PagesApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to create a new page.
     * @summary pages
     * @param {PagesApiCreateNewPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApiGenerated
     */
    public createNewPage(requestParameters: PagesApiCreateNewPageRequest = {}, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).createNewPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     * @summary show details for a page
     * @param {PagesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApiGenerated
     */
    public getDetails(requestParameters: PagesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve details for all Page objects.
     * @summary show details for all pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApiGenerated
     */
    public listAllDetails(options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).listAllDetails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to delete a single Page object, specified by ID.
     * @summary remove a page
     * @param {PagesApiRemovePageByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApiGenerated
     */
    public removePageById(requestParameters: PagesApiRemovePageByIdRequest, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).removePageById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     * @summary update details for a page
     * @param {PagesApiUpdatePageDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApiGenerated
     */
    public updatePageDetails(requestParameters: PagesApiUpdatePageDetailsRequest, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).updatePageDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
