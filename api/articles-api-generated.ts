/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Article } from '../models';
// @ts-ignore
import { ArticleArticle } from '../models';
// @ts-ignore
import { ArticleIndex } from '../models';
// @ts-ignore
import { ArticlesCreateNewArticle401Response } from '../models';
// @ts-ignore
import { ArticlesCreateNewArticle422Response } from '../models';
// @ts-ignore
import { ArticlesCreateNewArticleResponse } from '../models';
// @ts-ignore
import { ArticlesGetAllUserArticles401Response } from '../models';
// @ts-ignore
import { ArticlesGetById404Response } from '../models';
// @ts-ignore
import { ArticlesGetByPath404Response } from '../models';
// @ts-ignore
import { ArticlesGetPublishedList401Response } from '../models';
// @ts-ignore
import { ArticlesGetUnpublishedList401Response } from '../models';
// @ts-ignore
import { ArticlesUnpublishById404Response } from '../models';
// @ts-ignore
import { ArticlesUnpublishByIdResponse } from '../models';
// @ts-ignore
import { ArticlesUpdateById401Response } from '../models';
// @ts-ignore
import { ArticlesUpdateById404Response } from '../models';
// @ts-ignore
import { ArticlesUpdateById422Response } from '../models';
// @ts-ignore
import { ArticlesUpdateByIdResponse } from '../models';
// @ts-ignore
import { OrganizationsListArticles404Response } from '../models';
// @ts-ignore
import { VideoArticle } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ArticlesApi - axios parameter creator
 * @export
 */
export const ArticlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to create a new article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
         * @summary Publish article
         * @param {Article} [article] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewArticle: async (article?: Article, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: article,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(article, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
         * @summary User\'s all articles
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserArticles: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles/me/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/me/all',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a single published article given its `id`.
         * @summary Published article by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a single published article given its `path`.
         * @summary Published article by path
         * @param {string} username 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPath: async (username: string, slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getByPath', 'username', username)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getByPath', 'slug', slug)
            const localVarPath = `/api/articles/{username}/{slug}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug !== undefined ? slug : `-slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/{username}/{slug}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s articles
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/me',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s published articles
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList_1: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles/me/published`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/me/published',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s unpublished articles
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpublishedList: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles/me/unpublished`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/me/unpublished',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s Articles
         * @param {string} organizationIdOrUsername 
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticles: async (organizationIdOrUsername: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationIdOrUsername' is not null or undefined
            assertParamExists('listArticles', 'organizationIdOrUsername', organizationIdOrUsername)
            const localVarPath = `/api/organizations/{organization_id_or_username}/articles`
                .replace(`{${"organization_id_or_username"}}`, encodeURIComponent(String(organizationIdOrUsername !== undefined ? organizationIdOrUsername : `-organization_id_or_username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/{organization_id_or_username}/articles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain 24 articles by default.
         * @summary Articles with a video
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPopularity: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain 30 articles by default.
         * @summary Published articles sorted by published date
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLatestPublished: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/latest',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of articles.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain `30` articles by default.
         * @summary Published articles
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {string} [tag] Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;.
         * @param {string} [tags] Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity.
         * @param {string} [tagsExclude] Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity.
         * @param {string} [username] Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;.
         * @param {'fresh' | 'rising' | 'all'} [state] Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;.
         * @param {number} [top] Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;.
         * @param {number} [collectionId] Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPublishedArticles: async (page?: number, perPage?: number, tag?: string, tags?: string, tagsExclude?: string, username?: string, state?: 'fresh' | 'rising' | 'all', top?: number, collectionId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (tagsExclude !== undefined) {
                localVarQueryParameter['tags_exclude'] = tagsExclude;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (collectionId !== undefined) {
                localVarQueryParameter['collection_id'] = collectionId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to unpublish an article.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author\'s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
         * @summary Unpublish an article
         * @param {number} id The ID of the article to unpublish.
         * @param {string} [note] Content for the note that\&#39;s created along with unpublishing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishById: async (id: number, note?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unpublishById', 'id', id)
            const localVarPath = `/api/articles/{id}/unpublish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (note !== undefined) {
                localVarQueryParameter['note'] = note;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/{id}/unpublish',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to update an existing article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
         * @summary Update an article by id
         * @param {number} id The ID of the user to unpublish.
         * @param {Article} [article] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (id: number, article?: Article, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateById', 'id', id)
            const localVarPath = `/api/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: article,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(article, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticlesApi - functional programming interface
 * @export
 */
export const ArticlesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticlesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to create a new article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
         * @summary Publish article
         * @param {ArticlesApiCreateNewArticleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewArticle(requestParameters: ArticlesApiCreateNewArticleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticlesCreateNewArticleResponse>> {
            const article: Article = {
                article: requestParameters.article
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewArticle(article, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
         * @summary User\'s all articles
         * @param {ArticlesApiGetAllUserArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserArticles(requestParameters: ArticlesApiGetAllUserArticlesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserArticles(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a single published article given its `id`.
         * @summary Published article by id
         * @param {ArticlesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ArticlesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a single published article given its `path`.
         * @summary Published article by path
         * @param {ArticlesApiGetByPathRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByPath(requestParameters: ArticlesApiGetByPathRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByPath(requestParameters.username, requestParameters.slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s articles
         * @param {ArticlesApiGetPublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedList(requestParameters: ArticlesApiGetPublishedListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishedList(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s published articles
         * @param {ArticlesApiGetPublishedList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedList_1(requestParameters: ArticlesApiGetPublishedList0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishedList_1(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s unpublished articles
         * @param {ArticlesApiGetUnpublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnpublishedList(requestParameters: ArticlesApiGetUnpublishedListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnpublishedList(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s Articles
         * @param {ArticlesApiListArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listArticles(requestParameters: ArticlesApiListArticlesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listArticles(requestParameters.organizationIdOrUsername, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain 24 articles by default.
         * @summary Articles with a video
         * @param {ArticlesApiListByPopularityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByPopularity(requestParameters: ArticlesApiListByPopularityRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VideoArticle>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByPopularity(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain 30 articles by default.
         * @summary Published articles sorted by published date
         * @param {ArticlesApiListLatestPublishedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLatestPublished(requestParameters: ArticlesApiListLatestPublishedRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLatestPublished(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of articles.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain `30` articles by default.
         * @summary Published articles
         * @param {ArticlesApiListPublishedArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPublishedArticles(requestParameters: ArticlesApiListPublishedArticlesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPublishedArticles(requestParameters.page, requestParameters.perPage, requestParameters.tag, requestParameters.tags, requestParameters.tagsExclude, requestParameters.username, requestParameters.state, requestParameters.top, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to unpublish an article.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author\'s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
         * @summary Unpublish an article
         * @param {ArticlesApiUnpublishByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpublishById(requestParameters: ArticlesApiUnpublishByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpublishById(requestParameters.id, requestParameters.note, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to update an existing article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
         * @summary Update an article by id
         * @param {ArticlesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: ArticlesApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticlesUpdateByIdResponse>> {
            const article: Article = {
                article: requestParameters.article
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.id, article, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArticlesApi - factory interface
 * @export
 */
export const ArticlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticlesApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to create a new article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
         * @summary Publish article
         * @param {ArticlesApiCreateNewArticleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewArticle(requestParameters: ArticlesApiCreateNewArticleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ArticlesCreateNewArticleResponse> {
            return localVarFp.createNewArticle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
         * @summary User\'s all articles
         * @param {ArticlesApiGetAllUserArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserArticles(requestParameters: ArticlesApiGetAllUserArticlesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getAllUserArticles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a single published article given its `id`.
         * @summary Published article by id
         * @param {ArticlesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ArticlesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a single published article given its `path`.
         * @summary Published article by path
         * @param {ArticlesApiGetByPathRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPath(requestParameters: ArticlesApiGetByPathRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getByPath(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s articles
         * @param {ArticlesApiGetPublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList(requestParameters: ArticlesApiGetPublishedListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getPublishedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s published articles
         * @param {ArticlesApiGetPublishedList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList_1(requestParameters: ArticlesApiGetPublishedList0Request = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getPublishedList_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s unpublished articles
         * @param {ArticlesApiGetUnpublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpublishedList(requestParameters: ArticlesApiGetUnpublishedListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getUnpublishedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s Articles
         * @param {ArticlesApiListArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticles(requestParameters: ArticlesApiListArticlesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.listArticles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain 24 articles by default.
         * @summary Articles with a video
         * @param {ArticlesApiListByPopularityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPopularity(requestParameters: ArticlesApiListByPopularityRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<VideoArticle>> {
            return localVarFp.listByPopularity(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain 30 articles by default.
         * @summary Published articles sorted by published date
         * @param {ArticlesApiListLatestPublishedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLatestPublished(requestParameters: ArticlesApiListLatestPublishedRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.listLatestPublished(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of articles.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain `30` articles by default.
         * @summary Published articles
         * @param {ArticlesApiListPublishedArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPublishedArticles(requestParameters: ArticlesApiListPublishedArticlesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.listPublishedArticles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to unpublish an article.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author\'s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
         * @summary Unpublish an article
         * @param {ArticlesApiUnpublishByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishById(requestParameters: ArticlesApiUnpublishByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unpublishById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to update an existing article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
         * @summary Update an article by id
         * @param {ArticlesApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: ArticlesApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ArticlesUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewArticle operation in ArticlesApi.
 * @export
 * @interface ArticlesApiCreateNewArticleRequest
 */
export type ArticlesApiCreateNewArticleRequest = {
    
} & Article

/**
 * Request parameters for getAllUserArticles operation in ArticlesApi.
 * @export
 * @interface ArticlesApiGetAllUserArticlesRequest
 */
export type ArticlesApiGetAllUserArticlesRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof ArticlesApiGetAllUserArticles
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof ArticlesApiGetAllUserArticles
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getById operation in ArticlesApi.
 * @export
 * @interface ArticlesApiGetByIdRequest
 */
export type ArticlesApiGetByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ArticlesApiGetById
    */
    readonly id: number
    
}

/**
 * Request parameters for getByPath operation in ArticlesApi.
 * @export
 * @interface ArticlesApiGetByPathRequest
 */
export type ArticlesApiGetByPathRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ArticlesApiGetByPath
    */
    readonly username: string
    
    /**
    * 
    * @type {string}
    * @memberof ArticlesApiGetByPath
    */
    readonly slug: string
    
}

/**
 * Request parameters for getPublishedList operation in ArticlesApi.
 * @export
 * @interface ArticlesApiGetPublishedListRequest
 */
export type ArticlesApiGetPublishedListRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof ArticlesApiGetPublishedList
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof ArticlesApiGetPublishedList
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getPublishedList_1 operation in ArticlesApi.
 * @export
 * @interface ArticlesApiGetPublishedList0Request
 */
export type ArticlesApiGetPublishedList0Request = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof ArticlesApiGetPublishedList0
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof ArticlesApiGetPublishedList0
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getUnpublishedList operation in ArticlesApi.
 * @export
 * @interface ArticlesApiGetUnpublishedListRequest
 */
export type ArticlesApiGetUnpublishedListRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof ArticlesApiGetUnpublishedList
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof ArticlesApiGetUnpublishedList
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listArticles operation in ArticlesApi.
 * @export
 * @interface ArticlesApiListArticlesRequest
 */
export type ArticlesApiListArticlesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ArticlesApiListArticles
    */
    readonly organizationIdOrUsername: string
    
    /**
    * Pagination page
    * @type {number}
    * @memberof ArticlesApiListArticles
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof ArticlesApiListArticles
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listByPopularity operation in ArticlesApi.
 * @export
 * @interface ArticlesApiListByPopularityRequest
 */
export type ArticlesApiListByPopularityRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof ArticlesApiListByPopularity
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof ArticlesApiListByPopularity
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listLatestPublished operation in ArticlesApi.
 * @export
 * @interface ArticlesApiListLatestPublishedRequest
 */
export type ArticlesApiListLatestPublishedRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof ArticlesApiListLatestPublished
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof ArticlesApiListLatestPublished
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listPublishedArticles operation in ArticlesApi.
 * @export
 * @interface ArticlesApiListPublishedArticlesRequest
 */
export type ArticlesApiListPublishedArticlesRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof ArticlesApiListPublishedArticles
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof ArticlesApiListPublishedArticles
    */
    readonly perPage?: number
    
    /**
    * Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with `top`.
    * @type {string}
    * @memberof ArticlesApiListPublishedArticles
    */
    readonly tag?: string
    
    /**
    * Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity.
    * @type {string}
    * @memberof ArticlesApiListPublishedArticles
    */
    readonly tags?: string
    
    /**
    * Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity.
    * @type {string}
    * @memberof ArticlesApiListPublishedArticles
    */
    readonly tagsExclude?: string
    
    /**
    * Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If `state=all` the number of items returned will be `1000` instead of the default `30`.             This parameter can be used in conjuction with `state`.
    * @type {string}
    * @memberof ArticlesApiListPublishedArticles
    */
    readonly username?: string
    
    /**
    * Using this parameter will allow the client to check which articles are fresh or rising.             If `state=fresh` the server will return fresh articles.             If `state=rising` the server will return rising articles.             This param can be used in conjuction with `username`, only if set to `all`.
    * @type {'fresh' | 'rising' | 'all'}
    * @memberof ArticlesApiListPublishedArticles
    */
    readonly state?: 'fresh' | 'rising' | 'all'
    
    /**
    * Using this parameter will allow the client to return the most popular articles in the last `N` days. `top` indicates the number of days since publication of the articles returned. This param can be used in conjuction with `tag`.
    * @type {number}
    * @memberof ArticlesApiListPublishedArticles
    */
    readonly top?: number
    
    /**
    * Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.
    * @type {number}
    * @memberof ArticlesApiListPublishedArticles
    */
    readonly collectionId?: number
    
}

/**
 * Request parameters for unpublishById operation in ArticlesApi.
 * @export
 * @interface ArticlesApiUnpublishByIdRequest
 */
export type ArticlesApiUnpublishByIdRequest = {
    
    /**
    * The ID of the article to unpublish.
    * @type {number}
    * @memberof ArticlesApiUnpublishById
    */
    readonly id: number
    
    /**
    * Content for the note that\'s created along with unpublishing
    * @type {string}
    * @memberof ArticlesApiUnpublishById
    */
    readonly note?: string
    
}

/**
 * Request parameters for updateById operation in ArticlesApi.
 * @export
 * @interface ArticlesApiUpdateByIdRequest
 */
export type ArticlesApiUpdateByIdRequest = {
    
    /**
    * The ID of the user to unpublish.
    * @type {number}
    * @memberof ArticlesApiUpdateById
    */
    readonly id: number
    
} & Article

/**
 * ArticlesApiGenerated - object-oriented interface
 * @export
 * @class ArticlesApiGenerated
 * @extends {BaseAPI}
 */
export class ArticlesApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to create a new article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * @summary Publish article
     * @param {ArticlesApiCreateNewArticleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public createNewArticle(requestParameters: ArticlesApiCreateNewArticleRequest = {}, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).createNewArticle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
     * @summary User\'s all articles
     * @param {ArticlesApiGetAllUserArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public getAllUserArticles(requestParameters: ArticlesApiGetAllUserArticlesRequest = {}, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).getAllUserArticles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a single published article given its `id`.
     * @summary Published article by id
     * @param {ArticlesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public getById(requestParameters: ArticlesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a single published article given its `path`.
     * @summary Published article by path
     * @param {ArticlesApiGetByPathRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public getByPath(requestParameters: ArticlesApiGetByPathRequest, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).getByPath(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     * @summary User\'s articles
     * @param {ArticlesApiGetPublishedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public getPublishedList(requestParameters: ArticlesApiGetPublishedListRequest = {}, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).getPublishedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     * @summary User\'s published articles
     * @param {ArticlesApiGetPublishedList0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public getPublishedList_1(requestParameters: ArticlesApiGetPublishedList0Request = {}, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).getPublishedList_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
     * @summary User\'s unpublished articles
     * @param {ArticlesApiGetUnpublishedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public getUnpublishedList(requestParameters: ArticlesApiGetUnpublishedListRequest = {}, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).getUnpublishedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.
     * @summary Organization\'s Articles
     * @param {ArticlesApiListArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public listArticles(requestParameters: ArticlesApiListArticlesRequest, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).listArticles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain 24 articles by default.
     * @summary Articles with a video
     * @param {ArticlesApiListByPopularityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public listByPopularity(requestParameters: ArticlesApiListByPopularityRequest = {}, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).listByPopularity(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain 30 articles by default.
     * @summary Published articles sorted by published date
     * @param {ArticlesApiListLatestPublishedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public listLatestPublished(requestParameters: ArticlesApiListLatestPublishedRequest = {}, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).listLatestPublished(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of articles.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain `30` articles by default.
     * @summary Published articles
     * @param {ArticlesApiListPublishedArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public listPublishedArticles(requestParameters: ArticlesApiListPublishedArticlesRequest = {}, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).listPublishedArticles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to unpublish an article.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author\'s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
     * @summary Unpublish an article
     * @param {ArticlesApiUnpublishByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public unpublishById(requestParameters: ArticlesApiUnpublishByIdRequest, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).unpublishById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to update an existing article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * @summary Update an article by id
     * @param {ArticlesApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiGenerated
     */
    public updateById(requestParameters: ArticlesApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return ArticlesApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
