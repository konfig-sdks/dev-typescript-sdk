/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProfileImage } from '../models';
// @ts-ignore
import { ProfileImagesGetByUsername404Response } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProfileImagesApi - axios parameter creator
 * @export
 */
export const ProfileImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to retrieve a user or organization profile image information by its         corresponding username.
         * @summary A Users or organizations profile image
         * @param {string} username The parameter is the username of the user or the username of the organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUsername: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getByUsername', 'username', username)
            const localVarPath = `/api/profile_images/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/profile_images/{username}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileImagesApi - functional programming interface
 * @export
 */
export const ProfileImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to retrieve a user or organization profile image information by its         corresponding username.
         * @summary A Users or organizations profile image
         * @param {ProfileImagesApiGetByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByUsername(requestParameters: ProfileImagesApiGetByUsernameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProfileImage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByUsername(requestParameters.username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileImagesApi - factory interface
 * @export
 */
export const ProfileImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileImagesApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to retrieve a user or organization profile image information by its         corresponding username.
         * @summary A Users or organizations profile image
         * @param {ProfileImagesApiGetByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUsername(requestParameters: ProfileImagesApiGetByUsernameRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProfileImage>> {
            return localVarFp.getByUsername(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByUsername operation in ProfileImagesApi.
 * @export
 * @interface ProfileImagesApiGetByUsernameRequest
 */
export type ProfileImagesApiGetByUsernameRequest = {
    
    /**
    * The parameter is the username of the user or the username of the organization.
    * @type {string}
    * @memberof ProfileImagesApiGetByUsername
    */
    readonly username: string
    
}

/**
 * ProfileImagesApiGenerated - object-oriented interface
 * @export
 * @class ProfileImagesApiGenerated
 * @extends {BaseAPI}
 */
export class ProfileImagesApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to retrieve a user or organization profile image information by its         corresponding username.
     * @summary A Users or organizations profile image
     * @param {ProfileImagesApiGetByUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileImagesApiGenerated
     */
    public getByUsername(requestParameters: ProfileImagesApiGetByUsernameRequest, options?: AxiosRequestConfig) {
        return ProfileImagesApiFp(this.configuration).getByUsername(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
