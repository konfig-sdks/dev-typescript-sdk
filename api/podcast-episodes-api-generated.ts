/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PodcastEpisodeIndex } from '../models';
// @ts-ignore
import { PodcastepisodesListByDescendingPublicationDate404Response } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PodcastEpisodesApi - axios parameter creator
 * @export
 */
export const PodcastEpisodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to retrieve a list of podcast episodes.         \"Podcast episodes\" are episodes belonging to podcasts.         It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.         It supports pagination, each page will contain 30 articles by default.
         * @summary Podcast Episodes
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {string} [username] Using this parameter will retrieve episodes belonging to a specific podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByDescendingPublicationDate: async (page?: number, perPage?: number, username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/podcast_episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/podcast_episodes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PodcastEpisodesApi - functional programming interface
 * @export
 */
export const PodcastEpisodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PodcastEpisodesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to retrieve a list of podcast episodes.         \"Podcast episodes\" are episodes belonging to podcasts.         It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.         It supports pagination, each page will contain 30 articles by default.
         * @summary Podcast Episodes
         * @param {PodcastEpisodesApiListByDescendingPublicationDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByDescendingPublicationDate(requestParameters: PodcastEpisodesApiListByDescendingPublicationDateRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PodcastEpisodeIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByDescendingPublicationDate(requestParameters.page, requestParameters.perPage, requestParameters.username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PodcastEpisodesApi - factory interface
 * @export
 */
export const PodcastEpisodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PodcastEpisodesApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to retrieve a list of podcast episodes.         \"Podcast episodes\" are episodes belonging to podcasts.         It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.         It supports pagination, each page will contain 30 articles by default.
         * @summary Podcast Episodes
         * @param {PodcastEpisodesApiListByDescendingPublicationDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByDescendingPublicationDate(requestParameters: PodcastEpisodesApiListByDescendingPublicationDateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<PodcastEpisodeIndex>> {
            return localVarFp.listByDescendingPublicationDate(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listByDescendingPublicationDate operation in PodcastEpisodesApi.
 * @export
 * @interface PodcastEpisodesApiListByDescendingPublicationDateRequest
 */
export type PodcastEpisodesApiListByDescendingPublicationDateRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof PodcastEpisodesApiListByDescendingPublicationDate
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof PodcastEpisodesApiListByDescendingPublicationDate
    */
    readonly perPage?: number
    
    /**
    * Using this parameter will retrieve episodes belonging to a specific podcast.
    * @type {string}
    * @memberof PodcastEpisodesApiListByDescendingPublicationDate
    */
    readonly username?: string
    
}

/**
 * PodcastEpisodesApiGenerated - object-oriented interface
 * @export
 * @class PodcastEpisodesApiGenerated
 * @extends {BaseAPI}
 */
export class PodcastEpisodesApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to retrieve a list of podcast episodes.         \"Podcast episodes\" are episodes belonging to podcasts.         It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.         It supports pagination, each page will contain 30 articles by default.
     * @summary Podcast Episodes
     * @param {PodcastEpisodesApiListByDescendingPublicationDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastEpisodesApiGenerated
     */
    public listByDescendingPublicationDate(requestParameters: PodcastEpisodesApiListByDescendingPublicationDateRequest = {}, options?: AxiosRequestConfig) {
        return PodcastEpisodesApiFp(this.configuration).listByDescendingPublicationDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
