/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ArticleIndex } from '../models';
// @ts-ignore
import { ArticlesGetAllUserArticles401Response } from '../models';
// @ts-ignore
import { ArticlesGetPublishedList401Response } from '../models';
// @ts-ignore
import { ArticlesGetUnpublishedList401Response } from '../models';
// @ts-ignore
import { ExtendedUser } from '../models';
// @ts-ignore
import { MyUser } from '../models';
// @ts-ignore
import { OrganizationsListUsers404Response } from '../models';
// @ts-ignore
import { User } from '../models';
// @ts-ignore
import { UserInviteParam } from '../models';
// @ts-ignore
import { UsersAddLimitedRole404Response } from '../models';
// @ts-ignore
import { UsersAddLimitedRoleResponse } from '../models';
// @ts-ignore
import { UsersAddTrustedRole404Response } from '../models';
// @ts-ignore
import { UsersAddTrustedRoleResponse } from '../models';
// @ts-ignore
import { UsersAssignSpamRole404Response } from '../models';
// @ts-ignore
import { UsersAssignSpamRoleResponse } from '../models';
// @ts-ignore
import { UsersGetInformation401Response } from '../models';
// @ts-ignore
import { UsersInviteUser422Response } from '../models';
// @ts-ignore
import { UsersInviteUserResponse } from '../models';
// @ts-ignore
import { UsersRemoveLimits404Response } from '../models';
// @ts-ignore
import { UsersRemoveLimitsResponse } from '../models';
// @ts-ignore
import { UsersRemoveSpamRole404Response } from '../models';
// @ts-ignore
import { UsersRemoveSpamRoleResponse } from '../models';
// @ts-ignore
import { UsersRemoveTrustedRole404Response } from '../models';
// @ts-ignore
import { UsersRemoveTrustedRoleResponse } from '../models';
// @ts-ignore
import { UsersSuspendUser404Response } from '../models';
// @ts-ignore
import { UsersSuspendUserResponse } from '../models';
// @ts-ignore
import { UsersUnpublishUserArticlesAndComments404Response } from '../models';
// @ts-ignore
import { UsersUnpublishUserArticlesAndCommentsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to limit a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be assigned the \'limited\' role. Limiting a user will limit notifications generated from new posts and comments. It doesn\'t delete any of the user\'s content or prevent them from generating new content while limited. Users are not notified of their limits in the UI, so if you want them to know about this, you must notify them.
         * @summary Add limited role for a User
         * @param {number} id The ID of the user to limit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLimitedRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addLimitedRole', 'id', id)
            const localVarPath = `/api/users/{id}/limited`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/{id}/limited',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to add the trusted role to a user.           The user associated with the API key must have an \'admin\' or \'moderator\' role.           The specified user will be assigned the \'trusted\' role. Adding the trusted role to a user           allows them to upvote and downvote posts and flag content that needs investigating by admins.           Users are notified of this change in the UI, and by email.
         * @summary Add trusted role for a User
         * @param {number} id The ID of the user to assign the trusted role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTrustedRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addTrustedRole', 'id', id)
            const localVarPath = `/api/users/{id}/trusted`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/{id}/trusted',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to add the spam role to a user.            The user associated with the API key must have any \'admin\' or \'moderator\' role.            This specified user will be assigned the \'spam\' role. Addding the spam role to a user will stop the           user from posting new posts and comments. It doesn\'t delete any of the user\'s content, just           prevents them from creating new content while having the spam role. Users are not notified of their spaminess           in the UI, so if you want them to know about this, you must notify them
         * @summary Add spam role for a User
         * @param {number} id The ID of the user to assign the spam role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSpamRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('assignSpamRole', 'id', id)
            const localVarPath = `/api/users/{id}/spam`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/{id}/spam',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
         * @summary User\'s all articles
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserArticles: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles/me/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/me/all',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a single user, either by id or by the user\'s username.  For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
         * @summary A User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdOrUsername: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getByIdOrUsername', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve information about the authenticated user
         * @summary The authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/me',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s articles
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/me',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s published articles
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList_1: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles/me/published`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/me/published',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s unpublished articles
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpublishedList: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/articles/me/unpublished`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/articles/me/unpublished',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to trigger an invitation to the provided email address.          It requires a token from a user with `super_admin` privileges.
         * @summary Invite a User
         * @param {UserInviteParam} [userInviteParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser: async (userInviteParam?: UserInviteParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: userInviteParam,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/admin/users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(userInviteParam, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s users
         * @param {string} organizationIdOrUsername 
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (organizationIdOrUsername: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationIdOrUsername' is not null or undefined
            assertParamExists('listUsers', 'organizationIdOrUsername', organizationIdOrUsername)
            const localVarPath = `/api/organizations/{organization_id_or_username}/users`
                .replace(`{${"organization_id_or_username"}}`, encodeURIComponent(String(organizationIdOrUsername !== undefined ? organizationIdOrUsername : `-organization_id_or_username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/{organization_id_or_username}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to remove limits for a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be restored to \'general\' status. Users are not notified of limits in the UI, so if you want them to know about this, you must notify them.
         * @summary Remove limited for a User
         * @param {number} id The ID of the user to un-limit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLimits: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeLimits', 'id', id)
            const localVarPath = `/api/users/{id}/limited`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/{id}/limited',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to remove the spam role for a user.            The user associated with the API key must have any \'admin\' or \'moderator\' role.            This specified user will be restored to \'general\' status. Users are not notified           of removing their spam role in the UI, so if you want them to know about this, you must           notify them.
         * @summary Remove spam role from a User
         * @param {number} id The ID of the user to remove the spam role from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSpamRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeSpamRole', 'id', id)
            const localVarPath = `/api/users/{id}/spam`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/{id}/spam',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to remove the trusted role for a user.           The user associated with the API key must have an \'admin\' or \'moderator\' role.           The specified user will be restored to \'general\' status. Users are not notified           of removing their trusted role in the UI, so if you want them to know about this, you must           notify them.
         * @summary Remove trusted role from a User
         * @param {number} id The ID of the user to remove the trusted role from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTrustedRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeTrustedRole', 'id', id)
            const localVarPath = `/api/users/{id}/trusted`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/{id}/trusted',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to suspend a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be assigned the \'suspended\' role. Suspending a user will stop the user from posting new posts and comments. It doesn\'t delete any of the user\'s content, just prevents them from creating new content while suspended. Users are not notified of their suspension in the UI, so if you want them to know about this, you must notify them.
         * @summary Suspend a User
         * @param {number} id The ID of the user to suspend.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('suspendUser', 'id', id)
            const localVarPath = `/api/users/{id}/suspend`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/{id}/suspend',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to unpublish all of the articles and comments created by a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user\'s articles and comments will be unpublished and will no longer be visible to the public. They will remain in the database and will set back to draft status on the specified user\'s  dashboard. Any notifications associated with the specified user\'s articles and comments will be deleted.  Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT status code immediately, but the articles and comments will not be unpublished until the request is completed on the server.
         * @summary Unpublish a User\'s Articles and Comments
         * @param {number} id The ID of the user to unpublish.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishUserArticlesAndComments: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unpublishUserArticlesAndComments', 'id', id)
            const localVarPath = `/api/users/{id}/unpublish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/users/{id}/unpublish',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to limit a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be assigned the \'limited\' role. Limiting a user will limit notifications generated from new posts and comments. It doesn\'t delete any of the user\'s content or prevent them from generating new content while limited. Users are not notified of their limits in the UI, so if you want them to know about this, you must notify them.
         * @summary Add limited role for a User
         * @param {UsersApiAddLimitedRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLimitedRole(requestParameters: UsersApiAddLimitedRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLimitedRole(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to add the trusted role to a user.           The user associated with the API key must have an \'admin\' or \'moderator\' role.           The specified user will be assigned the \'trusted\' role. Adding the trusted role to a user           allows them to upvote and downvote posts and flag content that needs investigating by admins.           Users are notified of this change in the UI, and by email.
         * @summary Add trusted role for a User
         * @param {UsersApiAddTrustedRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTrustedRole(requestParameters: UsersApiAddTrustedRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTrustedRole(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to add the spam role to a user.            The user associated with the API key must have any \'admin\' or \'moderator\' role.            This specified user will be assigned the \'spam\' role. Addding the spam role to a user will stop the           user from posting new posts and comments. It doesn\'t delete any of the user\'s content, just           prevents them from creating new content while having the spam role. Users are not notified of their spaminess           in the UI, so if you want them to know about this, you must notify them
         * @summary Add spam role for a User
         * @param {UsersApiAssignSpamRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignSpamRole(requestParameters: UsersApiAssignSpamRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignSpamRole(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
         * @summary User\'s all articles
         * @param {UsersApiGetAllUserArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserArticles(requestParameters: UsersApiGetAllUserArticlesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserArticles(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a single user, either by id or by the user\'s username.  For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
         * @summary A User
         * @param {UsersApiGetByIdOrUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdOrUsername(requestParameters: UsersApiGetByIdOrUsernameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExtendedUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdOrUsername(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve information about the authenticated user
         * @summary The authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MyUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s articles
         * @param {UsersApiGetPublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedList(requestParameters: UsersApiGetPublishedListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishedList(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s published articles
         * @param {UsersApiGetPublishedList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedList_1(requestParameters: UsersApiGetPublishedList0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishedList_1(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s unpublished articles
         * @param {UsersApiGetUnpublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnpublishedList(requestParameters: UsersApiGetUnpublishedListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnpublishedList(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to trigger an invitation to the provided email address.          It requires a token from a user with `super_admin` privileges.
         * @summary Invite a User
         * @param {UsersApiInviteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteUser(requestParameters: UsersApiInviteUserRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const userInviteParam: UserInviteParam = {
                email: requestParameters.email,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteUser(userInviteParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s users
         * @param {UsersApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(requestParameters: UsersApiListUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(requestParameters.organizationIdOrUsername, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to remove limits for a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be restored to \'general\' status. Users are not notified of limits in the UI, so if you want them to know about this, you must notify them.
         * @summary Remove limited for a User
         * @param {UsersApiRemoveLimitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeLimits(requestParameters: UsersApiRemoveLimitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeLimits(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to remove the spam role for a user.            The user associated with the API key must have any \'admin\' or \'moderator\' role.            This specified user will be restored to \'general\' status. Users are not notified           of removing their spam role in the UI, so if you want them to know about this, you must           notify them.
         * @summary Remove spam role from a User
         * @param {UsersApiRemoveSpamRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSpamRole(requestParameters: UsersApiRemoveSpamRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSpamRole(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to remove the trusted role for a user.           The user associated with the API key must have an \'admin\' or \'moderator\' role.           The specified user will be restored to \'general\' status. Users are not notified           of removing their trusted role in the UI, so if you want them to know about this, you must           notify them.
         * @summary Remove trusted role from a User
         * @param {UsersApiRemoveTrustedRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTrustedRole(requestParameters: UsersApiRemoveTrustedRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTrustedRole(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to suspend a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be assigned the \'suspended\' role. Suspending a user will stop the user from posting new posts and comments. It doesn\'t delete any of the user\'s content, just prevents them from creating new content while suspended. Users are not notified of their suspension in the UI, so if you want them to know about this, you must notify them.
         * @summary Suspend a User
         * @param {UsersApiSuspendUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suspendUser(requestParameters: UsersApiSuspendUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suspendUser(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to unpublish all of the articles and comments created by a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user\'s articles and comments will be unpublished and will no longer be visible to the public. They will remain in the database and will set back to draft status on the specified user\'s  dashboard. Any notifications associated with the specified user\'s articles and comments will be deleted.  Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT status code immediately, but the articles and comments will not be unpublished until the request is completed on the server.
         * @summary Unpublish a User\'s Articles and Comments
         * @param {UsersApiUnpublishUserArticlesAndCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpublishUserArticlesAndComments(requestParameters: UsersApiUnpublishUserArticlesAndCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpublishUserArticlesAndComments(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to limit a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be assigned the \'limited\' role. Limiting a user will limit notifications generated from new posts and comments. It doesn\'t delete any of the user\'s content or prevent them from generating new content while limited. Users are not notified of their limits in the UI, so if you want them to know about this, you must notify them.
         * @summary Add limited role for a User
         * @param {UsersApiAddLimitedRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLimitedRole(requestParameters: UsersApiAddLimitedRoleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addLimitedRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to add the trusted role to a user.           The user associated with the API key must have an \'admin\' or \'moderator\' role.           The specified user will be assigned the \'trusted\' role. Adding the trusted role to a user           allows them to upvote and downvote posts and flag content that needs investigating by admins.           Users are notified of this change in the UI, and by email.
         * @summary Add trusted role for a User
         * @param {UsersApiAddTrustedRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTrustedRole(requestParameters: UsersApiAddTrustedRoleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addTrustedRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to add the spam role to a user.            The user associated with the API key must have any \'admin\' or \'moderator\' role.            This specified user will be assigned the \'spam\' role. Addding the spam role to a user will stop the           user from posting new posts and comments. It doesn\'t delete any of the user\'s content, just           prevents them from creating new content while having the spam role. Users are not notified of their spaminess           in the UI, so if you want them to know about this, you must notify them
         * @summary Add spam role for a User
         * @param {UsersApiAssignSpamRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSpamRole(requestParameters: UsersApiAssignSpamRoleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignSpamRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
         * @summary User\'s all articles
         * @param {UsersApiGetAllUserArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserArticles(requestParameters: UsersApiGetAllUserArticlesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getAllUserArticles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a single user, either by id or by the user\'s username.  For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
         * @summary A User
         * @param {UsersApiGetByIdOrUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdOrUsername(requestParameters: UsersApiGetByIdOrUsernameRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ExtendedUser>> {
            return localVarFp.getByIdOrUsername(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve information about the authenticated user
         * @summary The authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(options?: AxiosRequestConfig): AxiosPromise<Array<MyUser>> {
            return localVarFp.getInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s articles
         * @param {UsersApiGetPublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList(requestParameters: UsersApiGetPublishedListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getPublishedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s published articles
         * @param {UsersApiGetPublishedList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList_1(requestParameters: UsersApiGetPublishedList0Request = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getPublishedList_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
         * @summary User\'s unpublished articles
         * @param {UsersApiGetUnpublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpublishedList(requestParameters: UsersApiGetUnpublishedListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.getUnpublishedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to trigger an invitation to the provided email address.          It requires a token from a user with `super_admin` privileges.
         * @summary Invite a User
         * @param {UsersApiInviteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser(requestParameters: UsersApiInviteUserRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.inviteUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s users
         * @param {UsersApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(requestParameters: UsersApiListUsersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.listUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to remove limits for a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be restored to \'general\' status. Users are not notified of limits in the UI, so if you want them to know about this, you must notify them.
         * @summary Remove limited for a User
         * @param {UsersApiRemoveLimitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLimits(requestParameters: UsersApiRemoveLimitsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeLimits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to remove the spam role for a user.            The user associated with the API key must have any \'admin\' or \'moderator\' role.            This specified user will be restored to \'general\' status. Users are not notified           of removing their spam role in the UI, so if you want them to know about this, you must           notify them.
         * @summary Remove spam role from a User
         * @param {UsersApiRemoveSpamRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSpamRole(requestParameters: UsersApiRemoveSpamRoleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeSpamRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to remove the trusted role for a user.           The user associated with the API key must have an \'admin\' or \'moderator\' role.           The specified user will be restored to \'general\' status. Users are not notified           of removing their trusted role in the UI, so if you want them to know about this, you must           notify them.
         * @summary Remove trusted role from a User
         * @param {UsersApiRemoveTrustedRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTrustedRole(requestParameters: UsersApiRemoveTrustedRoleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeTrustedRole(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to suspend a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be assigned the \'suspended\' role. Suspending a user will stop the user from posting new posts and comments. It doesn\'t delete any of the user\'s content, just prevents them from creating new content while suspended. Users are not notified of their suspension in the UI, so if you want them to know about this, you must notify them.
         * @summary Suspend a User
         * @param {UsersApiSuspendUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendUser(requestParameters: UsersApiSuspendUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.suspendUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to unpublish all of the articles and comments created by a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user\'s articles and comments will be unpublished and will no longer be visible to the public. They will remain in the database and will set back to draft status on the specified user\'s  dashboard. Any notifications associated with the specified user\'s articles and comments will be deleted.  Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT status code immediately, but the articles and comments will not be unpublished until the request is completed on the server.
         * @summary Unpublish a User\'s Articles and Comments
         * @param {UsersApiUnpublishUserArticlesAndCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishUserArticlesAndComments(requestParameters: UsersApiUnpublishUserArticlesAndCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unpublishUserArticlesAndComments(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addLimitedRole operation in UsersApi.
 * @export
 * @interface UsersApiAddLimitedRoleRequest
 */
export type UsersApiAddLimitedRoleRequest = {
    
    /**
    * The ID of the user to limit.
    * @type {number}
    * @memberof UsersApiAddLimitedRole
    */
    readonly id: number
    
}

/**
 * Request parameters for addTrustedRole operation in UsersApi.
 * @export
 * @interface UsersApiAddTrustedRoleRequest
 */
export type UsersApiAddTrustedRoleRequest = {
    
    /**
    * The ID of the user to assign the trusted role.
    * @type {number}
    * @memberof UsersApiAddTrustedRole
    */
    readonly id: number
    
}

/**
 * Request parameters for assignSpamRole operation in UsersApi.
 * @export
 * @interface UsersApiAssignSpamRoleRequest
 */
export type UsersApiAssignSpamRoleRequest = {
    
    /**
    * The ID of the user to assign the spam role.
    * @type {number}
    * @memberof UsersApiAssignSpamRole
    */
    readonly id: number
    
}

/**
 * Request parameters for getAllUserArticles operation in UsersApi.
 * @export
 * @interface UsersApiGetAllUserArticlesRequest
 */
export type UsersApiGetAllUserArticlesRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof UsersApiGetAllUserArticles
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof UsersApiGetAllUserArticles
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getByIdOrUsername operation in UsersApi.
 * @export
 * @interface UsersApiGetByIdOrUsernameRequest
 */
export type UsersApiGetByIdOrUsernameRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetByIdOrUsername
    */
    readonly id: string
    
}

/**
 * Request parameters for getPublishedList operation in UsersApi.
 * @export
 * @interface UsersApiGetPublishedListRequest
 */
export type UsersApiGetPublishedListRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof UsersApiGetPublishedList
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof UsersApiGetPublishedList
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getPublishedList_1 operation in UsersApi.
 * @export
 * @interface UsersApiGetPublishedList0Request
 */
export type UsersApiGetPublishedList0Request = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof UsersApiGetPublishedList0
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof UsersApiGetPublishedList0
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getUnpublishedList operation in UsersApi.
 * @export
 * @interface UsersApiGetUnpublishedListRequest
 */
export type UsersApiGetUnpublishedListRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof UsersApiGetUnpublishedList
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof UsersApiGetUnpublishedList
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for inviteUser operation in UsersApi.
 * @export
 * @interface UsersApiInviteUserRequest
 */
export type UsersApiInviteUserRequest = {
    
} & UserInviteParam

/**
 * Request parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersRequest
 */
export type UsersApiListUsersRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiListUsers
    */
    readonly organizationIdOrUsername: string
    
    /**
    * Pagination page
    * @type {number}
    * @memberof UsersApiListUsers
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof UsersApiListUsers
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for removeLimits operation in UsersApi.
 * @export
 * @interface UsersApiRemoveLimitsRequest
 */
export type UsersApiRemoveLimitsRequest = {
    
    /**
    * The ID of the user to un-limit.
    * @type {number}
    * @memberof UsersApiRemoveLimits
    */
    readonly id: number
    
}

/**
 * Request parameters for removeSpamRole operation in UsersApi.
 * @export
 * @interface UsersApiRemoveSpamRoleRequest
 */
export type UsersApiRemoveSpamRoleRequest = {
    
    /**
    * The ID of the user to remove the spam role from.
    * @type {number}
    * @memberof UsersApiRemoveSpamRole
    */
    readonly id: number
    
}

/**
 * Request parameters for removeTrustedRole operation in UsersApi.
 * @export
 * @interface UsersApiRemoveTrustedRoleRequest
 */
export type UsersApiRemoveTrustedRoleRequest = {
    
    /**
    * The ID of the user to remove the trusted role from.
    * @type {number}
    * @memberof UsersApiRemoveTrustedRole
    */
    readonly id: number
    
}

/**
 * Request parameters for suspendUser operation in UsersApi.
 * @export
 * @interface UsersApiSuspendUserRequest
 */
export type UsersApiSuspendUserRequest = {
    
    /**
    * The ID of the user to suspend.
    * @type {number}
    * @memberof UsersApiSuspendUser
    */
    readonly id: number
    
}

/**
 * Request parameters for unpublishUserArticlesAndComments operation in UsersApi.
 * @export
 * @interface UsersApiUnpublishUserArticlesAndCommentsRequest
 */
export type UsersApiUnpublishUserArticlesAndCommentsRequest = {
    
    /**
    * The ID of the user to unpublish.
    * @type {number}
    * @memberof UsersApiUnpublishUserArticlesAndComments
    */
    readonly id: number
    
}

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to limit a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be assigned the \'limited\' role. Limiting a user will limit notifications generated from new posts and comments. It doesn\'t delete any of the user\'s content or prevent them from generating new content while limited. Users are not notified of their limits in the UI, so if you want them to know about this, you must notify them.
     * @summary Add limited role for a User
     * @param {UsersApiAddLimitedRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public addLimitedRole(requestParameters: UsersApiAddLimitedRoleRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).addLimitedRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to add the trusted role to a user.           The user associated with the API key must have an \'admin\' or \'moderator\' role.           The specified user will be assigned the \'trusted\' role. Adding the trusted role to a user           allows them to upvote and downvote posts and flag content that needs investigating by admins.           Users are notified of this change in the UI, and by email.
     * @summary Add trusted role for a User
     * @param {UsersApiAddTrustedRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public addTrustedRole(requestParameters: UsersApiAddTrustedRoleRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).addTrustedRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to add the spam role to a user.            The user associated with the API key must have any \'admin\' or \'moderator\' role.            This specified user will be assigned the \'spam\' role. Addding the spam role to a user will stop the           user from posting new posts and comments. It doesn\'t delete any of the user\'s content, just           prevents them from creating new content while having the spam role. Users are not notified of their spaminess           in the UI, so if you want them to know about this, you must notify them
     * @summary Add spam role for a User
     * @param {UsersApiAssignSpamRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public assignSpamRole(requestParameters: UsersApiAssignSpamRoleRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).assignSpamRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
     * @summary User\'s all articles
     * @param {UsersApiGetAllUserArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getAllUserArticles(requestParameters: UsersApiGetAllUserArticlesRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getAllUserArticles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a single user, either by id or by the user\'s username.  For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
     * @summary A User
     * @param {UsersApiGetByIdOrUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getByIdOrUsername(requestParameters: UsersApiGetByIdOrUsernameRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getByIdOrUsername(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve information about the authenticated user
     * @summary The authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getInformation(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     * @summary User\'s articles
     * @param {UsersApiGetPublishedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getPublishedList(requestParameters: UsersApiGetPublishedListRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getPublishedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
     * @summary User\'s published articles
     * @param {UsersApiGetPublishedList0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getPublishedList_1(requestParameters: UsersApiGetPublishedList0Request = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getPublishedList_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
     * @summary User\'s unpublished articles
     * @param {UsersApiGetUnpublishedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getUnpublishedList(requestParameters: UsersApiGetUnpublishedListRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUnpublishedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to trigger an invitation to the provided email address.          It requires a token from a user with `super_admin` privileges.
     * @summary Invite a User
     * @param {UsersApiInviteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public inviteUser(requestParameters: UsersApiInviteUserRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).inviteUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.
     * @summary Organization\'s users
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public listUsers(requestParameters: UsersApiListUsersRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to remove limits for a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be restored to \'general\' status. Users are not notified of limits in the UI, so if you want them to know about this, you must notify them.
     * @summary Remove limited for a User
     * @param {UsersApiRemoveLimitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public removeLimits(requestParameters: UsersApiRemoveLimitsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).removeLimits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to remove the spam role for a user.            The user associated with the API key must have any \'admin\' or \'moderator\' role.            This specified user will be restored to \'general\' status. Users are not notified           of removing their spam role in the UI, so if you want them to know about this, you must           notify them.
     * @summary Remove spam role from a User
     * @param {UsersApiRemoveSpamRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public removeSpamRole(requestParameters: UsersApiRemoveSpamRoleRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).removeSpamRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to remove the trusted role for a user.           The user associated with the API key must have an \'admin\' or \'moderator\' role.           The specified user will be restored to \'general\' status. Users are not notified           of removing their trusted role in the UI, so if you want them to know about this, you must           notify them.
     * @summary Remove trusted role from a User
     * @param {UsersApiRemoveTrustedRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public removeTrustedRole(requestParameters: UsersApiRemoveTrustedRoleRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).removeTrustedRole(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to suspend a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user will be assigned the \'suspended\' role. Suspending a user will stop the user from posting new posts and comments. It doesn\'t delete any of the user\'s content, just prevents them from creating new content while suspended. Users are not notified of their suspension in the UI, so if you want them to know about this, you must notify them.
     * @summary Suspend a User
     * @param {UsersApiSuspendUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public suspendUser(requestParameters: UsersApiSuspendUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).suspendUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to unpublish all of the articles and comments created by a user.  The user associated with the API key must have any \'admin\' or \'moderator\' role.  This specified user\'s articles and comments will be unpublished and will no longer be visible to the public. They will remain in the database and will set back to draft status on the specified user\'s  dashboard. Any notifications associated with the specified user\'s articles and comments will be deleted.  Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT status code immediately, but the articles and comments will not be unpublished until the request is completed on the server.
     * @summary Unpublish a User\'s Articles and Comments
     * @param {UsersApiUnpublishUserArticlesAndCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public unpublishUserArticlesAndComments(requestParameters: UsersApiUnpublishUserArticlesAndCommentsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).unpublishUserArticlesAndComments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
