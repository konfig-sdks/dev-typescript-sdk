/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Segment } from '../models';
// @ts-ignore
import { SegmentUserIds } from '../models';
// @ts-ignore
import { SegmentsAddUsersToSegment401Response } from '../models';
// @ts-ignore
import { SegmentsAddUsersToSegment404Response } from '../models';
// @ts-ignore
import { SegmentsAddUsersToSegment422Response } from '../models';
// @ts-ignore
import { SegmentsAddUsersToSegmentResponse } from '../models';
// @ts-ignore
import { SegmentsCreateManuallyManagedSegment401Response } from '../models';
// @ts-ignore
import { SegmentsCreateManuallyManagedSegmentResponse } from '../models';
// @ts-ignore
import { SegmentsDeleteManuallyManagedSegment401Response } from '../models';
// @ts-ignore
import { SegmentsDeleteManuallyManagedSegment404Response } from '../models';
// @ts-ignore
import { SegmentsDeleteManuallyManagedSegment409Response } from '../models';
// @ts-ignore
import { SegmentsDeleteManuallyManagedSegmentResponse } from '../models';
// @ts-ignore
import { SegmentsGetById401Response } from '../models';
// @ts-ignore
import { SegmentsGetById404Response } from '../models';
// @ts-ignore
import { SegmentsGetUserListInSegment401Response } from '../models';
// @ts-ignore
import { SegmentsGetUserListInSegment404Response } from '../models';
// @ts-ignore
import { SegmentsListAudienceSegments401Response } from '../models';
// @ts-ignore
import { SegmentsRemoveUsersFromSegment401Response } from '../models';
// @ts-ignore
import { SegmentsRemoveUsersFromSegment404Response } from '../models';
// @ts-ignore
import { SegmentsRemoveUsersFromSegment422Response } from '../models';
// @ts-ignore
import { SegmentsRemoveUsersFromSegmentResponse } from '../models';
// @ts-ignore
import { User } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SegmentsApi - axios parameter creator
 * @export
 */
export const SegmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to add users in bulk to an audience segment specified by ID.  Successes are users that were included in the segment (even if they were already in it), and failures are users that could not be added to the segment.
         * @summary Add users to a manually managed audience segment
         * @param {number} id 
         * @param {SegmentUserIds} [segmentUserIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersToSegment: async (id: number, segmentUserIds?: SegmentUserIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addUsersToSegment', 'id', id)
            const localVarPath = `/api/segments/{id}/add_users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: segmentUserIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/segments/{id}/add_users',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(segmentUserIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to create a new audience segment.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.
         * @summary Create a manually managed audience segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManuallyManagedSegment: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/segments',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to delete an audience segment specified by ID.  Audience segments cannot be deleted if there are still any Billboards using them.
         * @summary Delete a manually managed audience segment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManuallyManagedSegment: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteManuallyManagedSegment', 'id', id)
            const localVarPath = `/api/segments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/segments/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a single manually-managed audience segment specified by ID.
         * @summary A manually managed audience segment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/segments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/segments/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of the users in an audience segment specified by ID. The endpoint supports pagination, and each page will contain `30` users by default.
         * @summary Users in a manually managed audience segment
         * @param {number} id 
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListInSegment: async (id: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserListInSegment', 'id', id)
            const localVarPath = `/api/segments/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/segments/{id}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of audience segments.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.  The endpoint supports pagination, and each page will contain `30` segments by default.
         * @summary Manually managed audience segments
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAudienceSegments: async (perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/segments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to remove users in bulk from an audience segment specified by ID.  Successes are users that were removed; failures are users that weren\'t a part of the segment.
         * @summary Remove users from a manually managed audience segment
         * @param {number} id 
         * @param {SegmentUserIds} [segmentUserIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUsersFromSegment: async (id: number, segmentUserIds?: SegmentUserIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeUsersFromSegment', 'id', id)
            const localVarPath = `/api/segments/{id}/remove_users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: segmentUserIds,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/segments/{id}/remove_users',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(segmentUserIds, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SegmentsApi - functional programming interface
 * @export
 */
export const SegmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SegmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to add users in bulk to an audience segment specified by ID.  Successes are users that were included in the segment (even if they were already in it), and failures are users that could not be added to the segment.
         * @summary Add users to a manually managed audience segment
         * @param {SegmentsApiAddUsersToSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsersToSegment(requestParameters: SegmentsApiAddUsersToSegmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentsAddUsersToSegmentResponse>> {
            const segmentUserIds: SegmentUserIds = {
                user_ids: requestParameters.user_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUsersToSegment(requestParameters.id, segmentUserIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to create a new audience segment.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.
         * @summary Create a manually managed audience segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createManuallyManagedSegment(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentsCreateManuallyManagedSegmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createManuallyManagedSegment(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to delete an audience segment specified by ID.  Audience segments cannot be deleted if there are still any Billboards using them.
         * @summary Delete a manually managed audience segment
         * @param {SegmentsApiDeleteManuallyManagedSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteManuallyManagedSegment(requestParameters: SegmentsApiDeleteManuallyManagedSegmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentsDeleteManuallyManagedSegmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteManuallyManagedSegment(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a single manually-managed audience segment specified by ID.
         * @summary A manually managed audience segment
         * @param {SegmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: SegmentsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Segment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of the users in an audience segment specified by ID. The endpoint supports pagination, and each page will contain `30` users by default.
         * @summary Users in a manually managed audience segment
         * @param {SegmentsApiGetUserListInSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserListInSegment(requestParameters: SegmentsApiGetUserListInSegmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserListInSegment(requestParameters.id, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of audience segments.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.  The endpoint supports pagination, and each page will contain `30` segments by default.
         * @summary Manually managed audience segments
         * @param {SegmentsApiListAudienceSegmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAudienceSegments(requestParameters: SegmentsApiListAudienceSegmentsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Segment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAudienceSegments(requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to remove users in bulk from an audience segment specified by ID.  Successes are users that were removed; failures are users that weren\'t a part of the segment.
         * @summary Remove users from a manually managed audience segment
         * @param {SegmentsApiRemoveUsersFromSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUsersFromSegment(requestParameters: SegmentsApiRemoveUsersFromSegmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentsRemoveUsersFromSegmentResponse>> {
            const segmentUserIds: SegmentUserIds = {
                user_ids: requestParameters.user_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUsersFromSegment(requestParameters.id, segmentUserIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SegmentsApi - factory interface
 * @export
 */
export const SegmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SegmentsApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to add users in bulk to an audience segment specified by ID.  Successes are users that were included in the segment (even if they were already in it), and failures are users that could not be added to the segment.
         * @summary Add users to a manually managed audience segment
         * @param {SegmentsApiAddUsersToSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersToSegment(requestParameters: SegmentsApiAddUsersToSegmentRequest, options?: AxiosRequestConfig): AxiosPromise<SegmentsAddUsersToSegmentResponse> {
            return localVarFp.addUsersToSegment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to create a new audience segment.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.
         * @summary Create a manually managed audience segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManuallyManagedSegment(options?: AxiosRequestConfig): AxiosPromise<SegmentsCreateManuallyManagedSegmentResponse> {
            return localVarFp.createManuallyManagedSegment(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to delete an audience segment specified by ID.  Audience segments cannot be deleted if there are still any Billboards using them.
         * @summary Delete a manually managed audience segment
         * @param {SegmentsApiDeleteManuallyManagedSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManuallyManagedSegment(requestParameters: SegmentsApiDeleteManuallyManagedSegmentRequest, options?: AxiosRequestConfig): AxiosPromise<SegmentsDeleteManuallyManagedSegmentResponse> {
            return localVarFp.deleteManuallyManagedSegment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a single manually-managed audience segment specified by ID.
         * @summary A manually managed audience segment
         * @param {SegmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: SegmentsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Segment>> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of the users in an audience segment specified by ID. The endpoint supports pagination, and each page will contain `30` users by default.
         * @summary Users in a manually managed audience segment
         * @param {SegmentsApiGetUserListInSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListInSegment(requestParameters: SegmentsApiGetUserListInSegmentRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.getUserListInSegment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of audience segments.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.  The endpoint supports pagination, and each page will contain `30` segments by default.
         * @summary Manually managed audience segments
         * @param {SegmentsApiListAudienceSegmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAudienceSegments(requestParameters: SegmentsApiListAudienceSegmentsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Segment>> {
            return localVarFp.listAudienceSegments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to remove users in bulk from an audience segment specified by ID.  Successes are users that were removed; failures are users that weren\'t a part of the segment.
         * @summary Remove users from a manually managed audience segment
         * @param {SegmentsApiRemoveUsersFromSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUsersFromSegment(requestParameters: SegmentsApiRemoveUsersFromSegmentRequest, options?: AxiosRequestConfig): AxiosPromise<SegmentsRemoveUsersFromSegmentResponse> {
            return localVarFp.removeUsersFromSegment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUsersToSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiAddUsersToSegmentRequest
 */
export type SegmentsApiAddUsersToSegmentRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof SegmentsApiAddUsersToSegment
    */
    readonly id: number
    
} & SegmentUserIds

/**
 * Request parameters for deleteManuallyManagedSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiDeleteManuallyManagedSegmentRequest
 */
export type SegmentsApiDeleteManuallyManagedSegmentRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof SegmentsApiDeleteManuallyManagedSegment
    */
    readonly id: number
    
}

/**
 * Request parameters for getById operation in SegmentsApi.
 * @export
 * @interface SegmentsApiGetByIdRequest
 */
export type SegmentsApiGetByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof SegmentsApiGetById
    */
    readonly id: number
    
}

/**
 * Request parameters for getUserListInSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiGetUserListInSegmentRequest
 */
export type SegmentsApiGetUserListInSegmentRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof SegmentsApiGetUserListInSegment
    */
    readonly id: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof SegmentsApiGetUserListInSegment
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listAudienceSegments operation in SegmentsApi.
 * @export
 * @interface SegmentsApiListAudienceSegmentsRequest
 */
export type SegmentsApiListAudienceSegmentsRequest = {
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof SegmentsApiListAudienceSegments
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for removeUsersFromSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiRemoveUsersFromSegmentRequest
 */
export type SegmentsApiRemoveUsersFromSegmentRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof SegmentsApiRemoveUsersFromSegment
    */
    readonly id: number
    
} & SegmentUserIds

/**
 * SegmentsApiGenerated - object-oriented interface
 * @export
 * @class SegmentsApiGenerated
 * @extends {BaseAPI}
 */
export class SegmentsApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to add users in bulk to an audience segment specified by ID.  Successes are users that were included in the segment (even if they were already in it), and failures are users that could not be added to the segment.
     * @summary Add users to a manually managed audience segment
     * @param {SegmentsApiAddUsersToSegmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public addUsersToSegment(requestParameters: SegmentsApiAddUsersToSegmentRequest, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).addUsersToSegment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to create a new audience segment.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.
     * @summary Create a manually managed audience segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public createManuallyManagedSegment(options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).createManuallyManagedSegment(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to delete an audience segment specified by ID.  Audience segments cannot be deleted if there are still any Billboards using them.
     * @summary Delete a manually managed audience segment
     * @param {SegmentsApiDeleteManuallyManagedSegmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public deleteManuallyManagedSegment(requestParameters: SegmentsApiDeleteManuallyManagedSegmentRequest, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).deleteManuallyManagedSegment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a single manually-managed audience segment specified by ID.
     * @summary A manually managed audience segment
     * @param {SegmentsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public getById(requestParameters: SegmentsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of the users in an audience segment specified by ID. The endpoint supports pagination, and each page will contain `30` users by default.
     * @summary Users in a manually managed audience segment
     * @param {SegmentsApiGetUserListInSegmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public getUserListInSegment(requestParameters: SegmentsApiGetUserListInSegmentRequest, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).getUserListInSegment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of audience segments.  An audience segment is a group of users that can be targeted by a Billboard. This API only permits managing segments you create and maintain yourself.  The endpoint supports pagination, and each page will contain `30` segments by default.
     * @summary Manually managed audience segments
     * @param {SegmentsApiListAudienceSegmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public listAudienceSegments(requestParameters: SegmentsApiListAudienceSegmentsRequest = {}, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).listAudienceSegments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to remove users in bulk from an audience segment specified by ID.  Successes are users that were removed; failures are users that weren\'t a part of the segment.
     * @summary Remove users from a manually managed audience segment
     * @param {SegmentsApiRemoveUsersFromSegmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public removeUsersFromSegment(requestParameters: SegmentsApiRemoveUsersFromSegmentRequest, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).removeUsersFromSegment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
