/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReactionsCreateReaction401Response } from '../models';
// @ts-ignore
import { ReactionsCreateReactionResponse } from '../models';
// @ts-ignore
import { ReactionsToggleUserReaction401Response } from '../models';
// @ts-ignore
import { ReactionsToggleUserReactionResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReactionsApi - axios parameter creator
 * @export
 */
export const ReactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will return the previous \"like\"
         * @summary create reaction
         * @param {'like' | 'unicorn' | 'exploding_head' | 'raised_hands' | 'fire'} category 
         * @param {number} reactableId 
         * @param {'Comment' | 'Article' | 'User'} reactableType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReaction: async (category: 'like' | 'unicorn' | 'exploding_head' | 'raised_hands' | 'fire', reactableId: number, reactableType: 'Comment' | 'Article' | 'User', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('createReaction', 'category', category)
            // verify required parameter 'reactableId' is not null or undefined
            assertParamExists('createReaction', 'reactableId', reactableId)
            // verify required parameter 'reactableType' is not null or undefined
            assertParamExists('createReaction', 'reactableType', reactableType)
            const localVarPath = `/api/reactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (reactableId !== undefined) {
                localVarQueryParameter['reactable_id'] = reactableId;
            }

            if (reactableType !== undefined) {
                localVarQueryParameter['reactable_type'] = reactableType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/reactions',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to toggle the user\'s reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will remove the \"like\" from the user
         * @summary toggle reaction
         * @param {'like' | 'unicorn' | 'exploding_head' | 'raised_hands' | 'fire'} category 
         * @param {number} reactableId 
         * @param {'Comment' | 'Article' | 'User'} reactableType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleUserReaction: async (category: 'like' | 'unicorn' | 'exploding_head' | 'raised_hands' | 'fire', reactableId: number, reactableType: 'Comment' | 'Article' | 'User', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('toggleUserReaction', 'category', category)
            // verify required parameter 'reactableId' is not null or undefined
            assertParamExists('toggleUserReaction', 'reactableId', reactableId)
            // verify required parameter 'reactableType' is not null or undefined
            assertParamExists('toggleUserReaction', 'reactableType', reactableType)
            const localVarPath = `/api/reactions/toggle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })
            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (reactableId !== undefined) {
                localVarQueryParameter['reactable_id'] = reactableId;
            }

            if (reactableType !== undefined) {
                localVarQueryParameter['reactable_type'] = reactableType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/reactions/toggle',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReactionsApi - functional programming interface
 * @export
 */
export const ReactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will return the previous \"like\"
         * @summary create reaction
         * @param {ReactionsApiCreateReactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReaction(requestParameters: ReactionsApiCreateReactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactionsCreateReactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReaction(requestParameters.category, requestParameters.reactableId, requestParameters.reactableType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to toggle the user\'s reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will remove the \"like\" from the user
         * @summary toggle reaction
         * @param {ReactionsApiToggleUserReactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleUserReaction(requestParameters: ReactionsApiToggleUserReactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactionsToggleUserReactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleUserReaction(requestParameters.category, requestParameters.reactableId, requestParameters.reactableType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReactionsApi - factory interface
 * @export
 */
export const ReactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReactionsApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will return the previous \"like\"
         * @summary create reaction
         * @param {ReactionsApiCreateReactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReaction(requestParameters: ReactionsApiCreateReactionRequest, options?: AxiosRequestConfig): AxiosPromise<ReactionsCreateReactionResponse> {
            return localVarFp.createReaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to toggle the user\'s reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will remove the \"like\" from the user
         * @summary toggle reaction
         * @param {ReactionsApiToggleUserReactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleUserReaction(requestParameters: ReactionsApiToggleUserReactionRequest, options?: AxiosRequestConfig): AxiosPromise<ReactionsToggleUserReactionResponse> {
            return localVarFp.toggleUserReaction(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createReaction operation in ReactionsApi.
 * @export
 * @interface ReactionsApiCreateReactionRequest
 */
export type ReactionsApiCreateReactionRequest = {
    
    /**
    * 
    * @type {'like' | 'unicorn' | 'exploding_head' | 'raised_hands' | 'fire'}
    * @memberof ReactionsApiCreateReaction
    */
    readonly category: 'like' | 'unicorn' | 'exploding_head' | 'raised_hands' | 'fire'
    
    /**
    * 
    * @type {number}
    * @memberof ReactionsApiCreateReaction
    */
    readonly reactableId: number
    
    /**
    * 
    * @type {'Comment' | 'Article' | 'User'}
    * @memberof ReactionsApiCreateReaction
    */
    readonly reactableType: 'Comment' | 'Article' | 'User'
    
}

/**
 * Request parameters for toggleUserReaction operation in ReactionsApi.
 * @export
 * @interface ReactionsApiToggleUserReactionRequest
 */
export type ReactionsApiToggleUserReactionRequest = {
    
    /**
    * 
    * @type {'like' | 'unicorn' | 'exploding_head' | 'raised_hands' | 'fire'}
    * @memberof ReactionsApiToggleUserReaction
    */
    readonly category: 'like' | 'unicorn' | 'exploding_head' | 'raised_hands' | 'fire'
    
    /**
    * 
    * @type {number}
    * @memberof ReactionsApiToggleUserReaction
    */
    readonly reactableId: number
    
    /**
    * 
    * @type {'Comment' | 'Article' | 'User'}
    * @memberof ReactionsApiToggleUserReaction
    */
    readonly reactableType: 'Comment' | 'Article' | 'User'
    
}

/**
 * ReactionsApiGenerated - object-oriented interface
 * @export
 * @class ReactionsApiGenerated
 * @extends {BaseAPI}
 */
export class ReactionsApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will return the previous \"like\"
     * @summary create reaction
     * @param {ReactionsApiCreateReactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiGenerated
     */
    public createReaction(requestParameters: ReactionsApiCreateReactionRequest, options?: AxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).createReaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to toggle the user\'s reaction to a specified reactable (eg, Article, Comment, or User). For examples:         * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles         * \"Like\"ing that Article a second time will remove the \"like\" from the user
     * @summary toggle reaction
     * @param {ReactionsApiToggleUserReactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiGenerated
     */
    public toggleUserReaction(requestParameters: ReactionsApiToggleUserReactionRequest, options?: AxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).toggleUserReaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
