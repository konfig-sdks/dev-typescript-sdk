/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ArticleIndex } from '../models';
// @ts-ignore
import { Organization } from '../models';
// @ts-ignore
import { OrganizationsCreateNewOrganization422Response } from '../models';
// @ts-ignore
import { OrganizationsCreateNewOrganizationResponse } from '../models';
// @ts-ignore
import { OrganizationsDeleteById401Response } from '../models';
// @ts-ignore
import { OrganizationsDeleteByIdResponse } from '../models';
// @ts-ignore
import { OrganizationsGetById404Response } from '../models';
// @ts-ignore
import { OrganizationsGetByUsername404Response } from '../models';
// @ts-ignore
import { OrganizationsListArticles404Response } from '../models';
// @ts-ignore
import { OrganizationsListUsers404Response } from '../models';
// @ts-ignore
import { OrganizationsUpdateById401Response } from '../models';
// @ts-ignore
import { OrganizationsUpdateById404Response } from '../models';
// @ts-ignore
import { OrganizationsUpdateById422Response } from '../models';
// @ts-ignore
import { OrganizationsUpdateByIdResponse } from '../models';
// @ts-ignore
import { User } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to create an organization with the provided parameters.         It requires a token from a user with `admin` privileges.
         * @summary Create an Organization
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrganization: async (organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organization,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to delete a single organization, specified by id
         * @summary Delete an Organization by id
         * @param {number} id The ID of the organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteById', 'id', id)
            const localVarPath = `/api/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a single organization by their id
         * @summary An organization (by id)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a single organization by their username
         * @summary An organization (by username)
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUsername: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getByUsername', 'username', username)
            const localVarPath = `/api/organizations/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/{username}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s Articles
         * @param {string} organizationIdOrUsername 
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticles: async (organizationIdOrUsername: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationIdOrUsername' is not null or undefined
            assertParamExists('listArticles', 'organizationIdOrUsername', organizationIdOrUsername)
            const localVarPath = `/api/organizations/{organization_id_or_username}/articles`
                .replace(`{${"organization_id_or_username"}}`, encodeURIComponent(String(organizationIdOrUsername !== undefined ? organizationIdOrUsername : `-organization_id_or_username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/{organization_id_or_username}/articles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of Dev organizations.    It supports pagination, each page will contain 10 tags by default.
         * @summary Organizations
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfDev: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s users
         * @param {string} organizationIdOrUsername 
         * @param {number} [page] Pagination page
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (organizationIdOrUsername: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationIdOrUsername' is not null or undefined
            assertParamExists('listUsers', 'organizationIdOrUsername', organizationIdOrUsername)
            const localVarPath = `/api/organizations/{organization_id_or_username}/users`
                .replace(`{${"organization_id_or_username"}}`, encodeURIComponent(String(organizationIdOrUsername !== undefined ? organizationIdOrUsername : `-organization_id_or_username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/{organization_id_or_username}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to update an existing organization.
         * @summary Update an organization by id
         * @param {number} id The ID of the organization to update.
         * @param {Organization} [organization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (id: number, organization?: Organization, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateById', 'id', id)
            const localVarPath = `/api/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organization,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/organizations/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to create an organization with the provided parameters.         It requires a token from a user with `admin` privileges.
         * @summary Create an Organization
         * @param {OrganizationsApiCreateNewOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewOrganization(requestParameters: OrganizationsApiCreateNewOrganizationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationsCreateNewOrganizationResponse>> {
            const organization: Organization = {
                summary: requestParameters.summary,
                type_of: requestParameters.type_of,
                username: requestParameters.username,
                name: requestParameters.name,
                twitter_username: requestParameters.twitter_username,
                github_username: requestParameters.github_username,
                url: requestParameters.url,
                location: requestParameters.location,
                joined_at: requestParameters.joined_at,
                tech_stack: requestParameters.tech_stack,
                tag_line: requestParameters.tag_line,
                story: requestParameters.story
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewOrganization(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to delete a single organization, specified by id
         * @summary Delete an Organization by id
         * @param {OrganizationsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: OrganizationsApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationsDeleteByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a single organization by their id
         * @summary An organization (by id)
         * @param {OrganizationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: OrganizationsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a single organization by their username
         * @summary An organization (by username)
         * @param {OrganizationsApiGetByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByUsername(requestParameters: OrganizationsApiGetByUsernameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByUsername(requestParameters.username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s Articles
         * @param {OrganizationsApiListArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listArticles(requestParameters: OrganizationsApiListArticlesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleIndex>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listArticles(requestParameters.organizationIdOrUsername, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of Dev organizations.    It supports pagination, each page will contain 10 tags by default.
         * @summary Organizations
         * @param {OrganizationsApiListOfDevRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOfDev(requestParameters: OrganizationsApiListOfDevRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOfDev(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s users
         * @param {OrganizationsApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(requestParameters: OrganizationsApiListUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(requestParameters.organizationIdOrUsername, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to update an existing organization.
         * @summary Update an organization by id
         * @param {OrganizationsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: OrganizationsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationsUpdateByIdResponse>> {
            const organization: Organization = {
                summary: requestParameters.summary,
                type_of: requestParameters.type_of,
                username: requestParameters.username,
                name: requestParameters.name,
                twitter_username: requestParameters.twitter_username,
                github_username: requestParameters.github_username,
                url: requestParameters.url,
                location: requestParameters.location,
                joined_at: requestParameters.joined_at,
                tech_stack: requestParameters.tech_stack,
                tag_line: requestParameters.tag_line,
                story: requestParameters.story
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.id, organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to create an organization with the provided parameters.         It requires a token from a user with `admin` privileges.
         * @summary Create an Organization
         * @param {OrganizationsApiCreateNewOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrganization(requestParameters: OrganizationsApiCreateNewOrganizationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OrganizationsCreateNewOrganizationResponse> {
            return localVarFp.createNewOrganization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to delete a single organization, specified by id
         * @summary Delete an Organization by id
         * @param {OrganizationsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: OrganizationsApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationsDeleteByIdResponse> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a single organization by their id
         * @summary An organization (by id)
         * @param {OrganizationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: OrganizationsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Organization>> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a single organization by their username
         * @summary An organization (by username)
         * @param {OrganizationsApiGetByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByUsername(requestParameters: OrganizationsApiGetByUsernameRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Organization>> {
            return localVarFp.getByUsername(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s Articles
         * @param {OrganizationsApiListArticlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArticles(requestParameters: OrganizationsApiListArticlesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ArticleIndex>> {
            return localVarFp.listArticles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of Dev organizations.    It supports pagination, each page will contain 10 tags by default.
         * @summary Organizations
         * @param {OrganizationsApiListOfDevRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfDev(requestParameters: OrganizationsApiListOfDevRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Organization>> {
            return localVarFp.listOfDev(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.
         * @summary Organization\'s users
         * @param {OrganizationsApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(requestParameters: OrganizationsApiListUsersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.listUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to update an existing organization.
         * @summary Update an organization by id
         * @param {OrganizationsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: OrganizationsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationsUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiCreateNewOrganizationRequest
 */
export type OrganizationsApiCreateNewOrganizationRequest = {
    
} & Organization

/**
 * Request parameters for deleteById operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiDeleteByIdRequest
 */
export type OrganizationsApiDeleteByIdRequest = {
    
    /**
    * The ID of the organization.
    * @type {number}
    * @memberof OrganizationsApiDeleteById
    */
    readonly id: number
    
}

/**
 * Request parameters for getById operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetByIdRequest
 */
export type OrganizationsApiGetByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof OrganizationsApiGetById
    */
    readonly id: number
    
}

/**
 * Request parameters for getByUsername operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetByUsernameRequest
 */
export type OrganizationsApiGetByUsernameRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OrganizationsApiGetByUsername
    */
    readonly username: string
    
}

/**
 * Request parameters for listArticles operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiListArticlesRequest
 */
export type OrganizationsApiListArticlesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OrganizationsApiListArticles
    */
    readonly organizationIdOrUsername: string
    
    /**
    * Pagination page
    * @type {number}
    * @memberof OrganizationsApiListArticles
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof OrganizationsApiListArticles
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listOfDev operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiListOfDevRequest
 */
export type OrganizationsApiListOfDevRequest = {
    
    /**
    * Pagination page
    * @type {number}
    * @memberof OrganizationsApiListOfDev
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof OrganizationsApiListOfDev
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listUsers operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiListUsersRequest
 */
export type OrganizationsApiListUsersRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OrganizationsApiListUsers
    */
    readonly organizationIdOrUsername: string
    
    /**
    * Pagination page
    * @type {number}
    * @memberof OrganizationsApiListUsers
    */
    readonly page?: number
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof OrganizationsApiListUsers
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for updateById operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiUpdateByIdRequest
 */
export type OrganizationsApiUpdateByIdRequest = {
    
    /**
    * The ID of the organization to update.
    * @type {number}
    * @memberof OrganizationsApiUpdateById
    */
    readonly id: number
    
} & Organization

/**
 * OrganizationsApiGenerated - object-oriented interface
 * @export
 * @class OrganizationsApiGenerated
 * @extends {BaseAPI}
 */
export class OrganizationsApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to create an organization with the provided parameters.         It requires a token from a user with `admin` privileges.
     * @summary Create an Organization
     * @param {OrganizationsApiCreateNewOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public createNewOrganization(requestParameters: OrganizationsApiCreateNewOrganizationRequest = {}, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).createNewOrganization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to delete a single organization, specified by id
     * @summary Delete an Organization by id
     * @param {OrganizationsApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public deleteById(requestParameters: OrganizationsApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a single organization by their id
     * @summary An organization (by id)
     * @param {OrganizationsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public getById(requestParameters: OrganizationsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a single organization by their username
     * @summary An organization (by username)
     * @param {OrganizationsApiGetByUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public getByUsername(requestParameters: OrganizationsApiGetByUsernameRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getByUsername(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.
     * @summary Organization\'s Articles
     * @param {OrganizationsApiListArticlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public listArticles(requestParameters: OrganizationsApiListArticlesRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).listArticles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of Dev organizations.    It supports pagination, each page will contain 10 tags by default.
     * @summary Organizations
     * @param {OrganizationsApiListOfDevRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public listOfDev(requestParameters: OrganizationsApiListOfDevRequest = {}, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).listOfDev(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.
     * @summary Organization\'s users
     * @param {OrganizationsApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public listUsers(requestParameters: OrganizationsApiListUsersRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).listUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to update an existing organization.
     * @summary Update an organization by id
     * @param {OrganizationsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public updateById(requestParameters: OrganizationsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
