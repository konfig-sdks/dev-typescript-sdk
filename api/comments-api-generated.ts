/* tslint:disable */
/* eslint-disable */
/*
Forem API V1

Access Forem articles, users and other resources via API.
        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
        All endpoints can be accessed with the 'api-key' header and a accept header, but
        some of them are accessible publicly without authentication.

        Dates and date times, unless otherwise specified, must be in
        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Comment } from '../models';
// @ts-ignore
import { CommentsGetAllThreaded404Response } from '../models';
// @ts-ignore
import { CommentsGetThreadedComment404Response } from '../models';
// @ts-ignore
import { CommentsGetThreadedCommentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.  It will return the all top level comments with their nested comments as threads. See the format specification for further details.  It supports pagination, each page will contain `50` top level comments (and as many child comments they have) by default.  If the page parameter is not passed, all comments of an article or podcast will be returned. 
         * @summary Comments
         * @param {number} [perPage] Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable.
         * @param {string} [aId] Article identifier.
         * @param {string} [pId] Podcast Episode identifier.
         * @param {number} [page] Pagination page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThreaded: async (perPage?: number, aId?: string, pId?: string, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (aId !== undefined) {
                localVarQueryParameter['a_id'] = aId;
            }

            if (pId !== undefined) {
                localVarQueryParameter['p_id'] = pId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/comments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows the client to retrieve a comment as well as his descendants comments.    It will return the required comment (the root) with its nested descendants as a thread.    See the format specification for further details.
         * @summary Comment by id
         * @param {number} id Comment identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadedComment: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getThreadedComment', 'id', id)
            const localVarPath = `/api/comments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/comments/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.  It will return the all top level comments with their nested comments as threads. See the format specification for further details.  It supports pagination, each page will contain `50` top level comments (and as many child comments they have) by default.  If the page parameter is not passed, all comments of an article or podcast will be returned. 
         * @summary Comments
         * @param {CommentsApiGetAllThreadedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllThreaded(requestParameters: CommentsApiGetAllThreadedRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllThreaded(requestParameters.perPage, requestParameters.aId, requestParameters.pId, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows the client to retrieve a comment as well as his descendants comments.    It will return the required comment (the root) with its nested descendants as a thread.    See the format specification for further details.
         * @summary Comment by id
         * @param {CommentsApiGetThreadedCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThreadedComment(requestParameters: CommentsApiGetThreadedCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentsGetThreadedCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThreadedComment(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentsApiFp(configuration)
    return {
        /**
         * This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.  It will return the all top level comments with their nested comments as threads. See the format specification for further details.  It supports pagination, each page will contain `50` top level comments (and as many child comments they have) by default.  If the page parameter is not passed, all comments of an article or podcast will be returned. 
         * @summary Comments
         * @param {CommentsApiGetAllThreadedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThreaded(requestParameters: CommentsApiGetAllThreadedRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Comment>> {
            return localVarFp.getAllThreaded(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows the client to retrieve a comment as well as his descendants comments.    It will return the required comment (the root) with its nested descendants as a thread.    See the format specification for further details.
         * @summary Comment by id
         * @param {CommentsApiGetThreadedCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadedComment(requestParameters: CommentsApiGetThreadedCommentRequest, options?: AxiosRequestConfig): AxiosPromise<CommentsGetThreadedCommentResponse> {
            return localVarFp.getThreadedComment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllThreaded operation in CommentsApi.
 * @export
 * @interface CommentsApiGetAllThreadedRequest
 */
export type CommentsApiGetAllThreadedRequest = {
    
    /**
    * Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable.
    * @type {number}
    * @memberof CommentsApiGetAllThreaded
    */
    readonly perPage?: number
    
    /**
    * Article identifier.
    * @type {string}
    * @memberof CommentsApiGetAllThreaded
    */
    readonly aId?: string
    
    /**
    * Podcast Episode identifier.
    * @type {string}
    * @memberof CommentsApiGetAllThreaded
    */
    readonly pId?: string
    
    /**
    * Pagination page
    * @type {number}
    * @memberof CommentsApiGetAllThreaded
    */
    readonly page?: number
    
}

/**
 * Request parameters for getThreadedComment operation in CommentsApi.
 * @export
 * @interface CommentsApiGetThreadedCommentRequest
 */
export type CommentsApiGetThreadedCommentRequest = {
    
    /**
    * Comment identifier.
    * @type {number}
    * @memberof CommentsApiGetThreadedComment
    */
    readonly id: number
    
}

/**
 * CommentsApiGenerated - object-oriented interface
 * @export
 * @class CommentsApiGenerated
 * @extends {BaseAPI}
 */
export class CommentsApiGenerated extends BaseAPI {
    /**
     * This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.  It will return the all top level comments with their nested comments as threads. See the format specification for further details.  It supports pagination, each page will contain `50` top level comments (and as many child comments they have) by default.  If the page parameter is not passed, all comments of an article or podcast will be returned. 
     * @summary Comments
     * @param {CommentsApiGetAllThreadedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public getAllThreaded(requestParameters: CommentsApiGetAllThreadedRequest = {}, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).getAllThreaded(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows the client to retrieve a comment as well as his descendants comments.    It will return the required comment (the root) with its nested descendants as a thread.    See the format specification for further details.
     * @summary Comment by id
     * @param {CommentsApiGetThreadedCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiGenerated
     */
    public getThreadedComment(requestParameters: CommentsApiGetThreadedCommentRequest, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).getThreadedComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
